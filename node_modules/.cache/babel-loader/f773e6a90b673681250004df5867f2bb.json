{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const addLeaders = promos => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addFeedback = feedback => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: feedback\n});\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => dispatch => {\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  newFeedback.date = new Date().toISOString();\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      alert(JSON.stringify(response));\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => alert('Thank you for your feedback!\\n' + JSON.stringify(response))).then(response => dispatch(addFeedback(response))).catch(error => {\n    console.log('post feedback', error.message);\n    alert('Your feedback could not be posted\\nError: ' + error.message);\n  });\n};","map":{"version":3,"sources":["/home/rupali/projects/Front-End-Web-Development-with-React/React/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","addLeaders","ADD_LEADERS","fetchLeaders","leadersLoading","leaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","addFeedback","feedback","ADD_FEEDBACK","postFeedback","firstname","lastname","telnum","email","agree","contactType","newFeedback"],"mappings":"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","sourcesContent":["\nimport * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\nexport const addComment = (comment) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  })\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        throw error;\n      })\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error => { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: ' + error.message); });\n};\n\nexport const fetchDishes = () => (dispatch) => {\n\n  dispatch(dishesLoading(true));\n\n  return fetch(baseUrl + 'dishes')\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      })\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n}\n\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = (errmess) => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\n\n\nexport const fetchComments = () => (dispatch) => {\n  return fetch(baseUrl + 'comments')\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\nexport const commentsFailed = (errmess) => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\n\nexport const addComments = (comments) => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\n\nexport const fetchPromos = () => (dispatch) => {\n\n  dispatch(promosLoading());\n\n  return fetch(baseUrl + 'promotions')\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\n\nexport const addLeaders = (promos) => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: promos\n});\n\nexport const fetchLeaders = () => (dispatch) => {\n\n  dispatch(leadersLoading(true));\n\n  return fetch(baseUrl + 'leaders')\n    .then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        var errmess = new Error(error.message);\n        throw errmess;\n      })\n    .then(response => response.json())\n    .then(leaders => dispatch(addLeaders(leaders)))\n    .catch(error => dispatch(leadersFailed(error.message)));\n};\n\nexport const leadersLoading = () => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\n\nexport const addFeedback = (feedback) => ({\n  type: ActionTypes.ADD_FEEDBACK,\n  payload: feedback\n});\n\nexport const postFeedback = (firstname, lastname, telnum, email, agree, contactType, message) => (dispatch) => {\n\n  const newFeedback = {\n    firstname: firstname,\n    lastname: lastname,\n    telnum: telnum,\n    email: email,\n    agree: agree,\n    contactType: contactType,\n    message: message\n  };\n  newFeedback.date = new Date().toISOString();\n\n  return fetch(baseUrl + 'feedback', {\n    method: \"POST\",\n    body: JSON.stringify(newFeedback),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  })\n    .then(response => {\n      if (response.ok) {\n        alert(JSON.stringify(response));\n        return response;\n      } else {\n        var error = new Error('Error ' + response.status + ': ' + response.statusText);\n        error.response = response;\n        throw error;\n      }\n    },\n      error => {\n        throw error;\n      })\n    .then(response => alert('Thank you for your feedback!\\n' + JSON.stringify(response)))\n    .then(response => dispatch(addFeedback(response)))\n    .catch(error => { console.log('post feedback', error.message); alert('Your feedback could not be posted\\nError: ' + error.message); });\n};"]},"metadata":{},"sourceType":"module"}